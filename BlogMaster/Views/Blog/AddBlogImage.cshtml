@model BlogPostPutDto;
@{
    Layout = "~/Views/Shared/_AdministratorLayout.cshtml";

    int? imageCount = Model.ImageViews?.Count();
    Console.WriteLine("Stop...Hammer time");
}



<div class="container">

    <h2>Remove existing images</h2>
    <p class="fs-5 fw-lighter">Check mark any existing images to delete them when submiting</p>

    <form method="post" enctype="multipart/form-data">
        @if (Model.ImageViews != null)
        {
            @foreach (var imageView in Model.ImageViews)
            {
                <div>
                    <img src="@(imageView.src)" alt="image" style="margin: 5px; width: 100px" />
                    <div class="form-check form-check-inline">
                        <input class="form-check-input d-inline"
                               type="checkbox"
                               name="deletedImages"
                               value="@(imageView.ImageId)"
                               id="@(imageView.ImageId)" />
                        <label class="form-check-label" for="@(imageView.ImageId)">
                            @(imageView.Filename)
                        </label>
                    </div>
                </div>
            }
        }
        <hr/>
        <h2>Add new images</h2>
        <div class="mb-3" id="imageUploadContainer">
            <label for="formFile" class="form-label">Add Blog Images</label>
            <input class="form-control mb-2" name="newImages" type="file" id="formFile" accept="image/*">
        </div>
        <button type="button" class="btn btn-success mb-3" id="addMoreImages">Add More Images</button>
        <button type="button" class="btn btn-danger mb-3" id="removeLastImage">Remove Last Image</button>

        <div>
            <button type="submit" class="btn btn-primary mb-5">Submit</button>
        </div>

        </form>




    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const container = document.getElementById('imageUploadContainer');
            const addMoreButton = document.getElementById('addMoreImages');
            const removeLastButton = document.getElementById('removeLastImage');

            // Store the file input elements for tracking
            const fileInputs = [];

            // Function to handle file input change
            const handleFileInputChange = (input) => {
                const files = input.files;
                const previewContainer = document.createElement('div');

                Array.from(files).forEach(file => {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        const img = document.createElement('img');
                        img.src = e.target.result;
                        img.classList.add('image-preview');
                        img.style.width = '100px'; // Set a fixed width for the preview
                        img.style.margin = '5px';  // Add some spacing
                        previewContainer.appendChild(img);
                    };
                    reader.readAsDataURL(file);
                });

                // Append the preview container to the form
                container.appendChild(previewContainer);
            };

            // Initial file input change event
            const initialInput = container.querySelector('input[type="file"]');
            initialInput.addEventListener('change', function () {
                handleFileInputChange(initialInput);
            });

            // Add more file inputs
            addMoreButton.addEventListener('click', function () {
                const newInput = document.createElement('input');
                newInput.type = 'file';
                newInput.name = 'newImages';
                newInput.accept = 'image/*';
                newInput.classList.add('form-control');
                newInput.classList.add('mb-2');


                newInput.addEventListener('change', function () {
                    handleFileInputChange(newInput);
                });


                container.appendChild(newInput);
                fileInputs.push(newInput);
            });

            // Remove the last file input
            removeLastButton.addEventListener('click', function () {
                if (fileInputs.length > 0) {
                    const lastInput = fileInputs.pop();
                    lastInput.remove();

                    // Also remove the corresponding previews (if any)
                    const previews = container.querySelectorAll('.image-preview');
                    if (previews.length > 0) {
                        const lastPreview = previews[previews.length - 1];
                        lastPreview.parentElement.remove(); // Remove the last preview
                    }
                }
            });
        });
    </script>
</div>